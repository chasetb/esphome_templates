substitutions:
  device_name: ""
  pretty_name: ""
  max_temp: "70.0"
  device_type: "Shelly 1PM"
  icon: ""

esphome:
  name: ${device_name}
  comment: "${device_type}"

esp8266:
  board: esp01_1m

logger:

api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: HIGH # for ESP8266 LOW/HIGH are mixed up, esphome/issues/issues/1532
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name} Fallback"
    password: !secret fallback_password

time:
  - platform: homeassistant
    id: homeassistant_time

captive_portal:

# web_server:
#   port: 80
#   auth:
#     username: admin
#     password: !secret web_server_password

# Device Specific Config
sensor:
  - platform: wifi_signal
    name: "${pretty_name} WiFi Signal"
    device_class: signal_strength
    update_interval: 60s
  - platform: hlw8012
    cf_pin: GPIO05
    cf1_pin: GPIO13 # not used because it is not available on the 1PM but it is needed to compile
    sel_pin: GPIO14 # not used because it is not available on the 1PM but it is needed to compile
    power:
      name: "${pretty_name} Power"
      unit_of_measurement: W
      id: "shelly1pm_power"
      device_class: power
      state_class: measurement
      accuracy_decimals: 0
      filters:
      # Map from sensor -> measured value
      - calibrate_linear:
          - 0.0 -> 1.0
          - 110.33186 -> 20.62
          - 131.01909 -> 24.32
          - 341.33920 -> 62.08
          - 5561.41553 -> 1000.0
          - 2975.51221 -> 535.7
          - 9612.66309 -> 1720.0
          - 14891.35352 -> 2679.0
      # Make everything below 2W appear as just 0W.
      - lambda: if (x < 2) return 0; else return x;
    update_interval: 10s

  - platform: total_daily_energy
    name: "${pretty_name} Daily Energy"
    power_id: "shelly1pm_power"
    device_class: energy
    state_class: measurement
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh

  - platform: ntc
    sensor: temp_resistance_reading
    name: "${pretty_name} Temperature"
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    device_class: temperature
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: ${max_temp}
        then:
          - homeassistant.event:
              event: esphome.overheat
              data:
                title: "${pretty_name} has overheated."
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0

light:
  - platform: binary
    name: "${pretty_name}"
    output: light_output
    icon: ${icon}
    id: lightid

output:
  - id: light_output
    platform: gpio
    pin: GPIO15

  - platform: esp8266_pwm
    id: state_led
    pin:
      number: GPIO00
      inverted: true

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO4
    filters:
      - delayed_on_off: 50ms # small delay to prevent debouncing
    name: "Switch ${pretty_name}"
    on_state:
      then:
        - light.toggle: lightid
    internal: true
    id: switchid